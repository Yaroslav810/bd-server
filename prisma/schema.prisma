// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  user_id       String        @id @default(uuid())
  login         String        @unique
  first_name    String
  last_name     String?
  birth_date    DateTime?
  password      String
  type          UserType      @default(user)
  links         UserLink[]
  user_on_event UserOnEvent[]
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  Like          Like[]

  @@map("user")
}

model UserLink {
  user_link_id String   @id @default(uuid())
  user_id      String
  link         String
  link_type    LinkType
  user         User     @relation(fields: [user_id], references: [user_id])
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  @@map("user_link")
}

model Event {
  event_id           String          @id @default(uuid())
  title              String
  description        String?
  start              DateTime
  duration           Int
  participants_count Int
  price              Int?
  user_on_event      UserOnEvent[]
  created_at         DateTime        @default(now())
  updated_at         DateTime        @updatedAt
  EventStatic        EventStatic[]
  EventLink          EventLink[]
  EventDetailed      EventDetailed[]
  EventTag           EventTag[]
  ItemForEvent       ItemForEvent[]
  Like               Like[]

  @@map("event")
}

model UserOnEvent {
  user_on_event_id String   @id @default(uuid())
  user_id          String
  event_id         String
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  user             User     @relation(fields: [user_id], references: [user_id])
  event            Event    @relation(fields: [event_id], references: [event_id])

  @@map("user_on_event")
}

model EventStatic {
  event_static_id String   @id @default(uuid())
  event_id        String
  static_path     String
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  event           Event    @relation(fields: [event_id], references: [event_id])

  @@map("event_static")
}

model EventLink {
  event_link_id String   @id @default(uuid())
  event_id      String
  link          String
  event         Event    @relation(fields: [event_id], references: [event_id])
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  @@map("event_link")
}

model EventDetailed {
  event_detailed_id   String                @id @default(uuid())
  event_id            String
  title               String
  description         String?
  order               Int
  event               Event                 @relation(fields: [event_id], references: [event_id])
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  EventDetailedStatic EventDetailedStatic[]

  @@map("event_detailed")
}

model Tag {
  tag_id     String     @id @default(uuid())
  tag        String
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  EventTag   EventTag[]

  @@map("tag")
}

model EventTag {
  event_tag_id String   @id @default(uuid())
  event_id     String
  tag_id       String
  event        Event    @relation(fields: [event_id], references: [event_id])
  tag          Tag      @relation(fields: [tag_id], references: [tag_id])
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  @@map("event_tag")
}

model EventDetailedStatic {
  event_detailed_static_id String        @id @default(uuid())
  event_detailed_id        String
  static_path              String
  created_at               DateTime      @default(now())
  updated_at               DateTime      @updatedAt
  eventDetailed            EventDetailed @relation(fields: [event_detailed_id], references: [event_detailed_id])

  @@map("event_detailed_static")
}

model Item {
  item_id      String         @id @default(uuid())
  title        String
  description  String
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  ItemForEvent ItemForEvent[]

  @@map("item")
}

model ItemForEvent {
  item_for_event_id String   @id @default(uuid())
  event_id          String
  item_id           String
  event             Event    @relation(fields: [event_id], references: [event_id])
  item              Item     @relation(fields: [item_id], references: [item_id])
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  @@map("item_for_event")
}

model Like {
  like_id    String   @id @default(uuid())
  user_id    String
  event_id   String
  user       User     @relation(fields: [user_id], references: [user_id])
  event      Event    @relation(fields: [event_id], references: [event_id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("like")
}

enum UserType {
  user
  company
}

enum LinkType {
  VK
  TELEGRAM
  YOUTUBE
  WHATS_APP
  VIBER
  OTHER
}
